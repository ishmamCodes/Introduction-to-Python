{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "12f41c82",
   "metadata": {},
   "source": [
    "Question-1:\n",
    "Write a python program that keeps taking strings as input from the user \n",
    "until he/she enters \"Done\". Then, for each string, print the following \n",
    "information: Number of words, number of vowels, and total length. If \"Done\" \n",
    "is entered as the first input, print \"no string was entered\"\n",
    "======================================================\n",
    "\n",
    "Sample Input 1:\n",
    "\n",
    "I am a student\n",
    "\n",
    "I like apples\n",
    "\n",
    "Done\n",
    "\n",
    "Sample Output 1:\n",
    "\n",
    "String 1: I am a student\n",
    "Number of words: 4\n",
    "Number of vowels: 5\n",
    "Total length: 14\n",
    "\n",
    "String 2: I like apples\n",
    "Number of words: 3\n",
    "Number of vowels: 5\n",
    "Total length: 13\n",
    "\n",
    "Explanation 1:\n",
    "The 1st string is \"I am a student\". It has 4 words: I, am, a, student. \n",
    "There are 5 vowels: i, a, a, u, e. The total length of the string is 14.\n",
    "The 2nd string is \"I like apples\". It has 3 words: I, like, apples. There \n",
    "are 5 vowels: i, i, e, a, e. The total length of the string is 13.\n",
    "\n",
    "======================================================\n",
    "Sample Input 2:\n",
    "Done\n",
    "\n",
    "Sample Output 2:\n",
    "no string was entered\n",
    "\n",
    "Explanation 2:\n",
    "As no string was entered before \"Done\", \"no string was entered\" is shown as \n",
    "output.\n",
    "\n",
    "======================================================\n",
    "Sample Input 3:\n",
    "John\n",
    "Done\n",
    "\n",
    "Sample Output 3:\n",
    "String 1: John\n",
    "Number of words: 1\n",
    "Number of vowels: 1\n",
    "Total length: 4\n",
    "\n",
    "Explanation 3:\n",
    "The only string is \"John\". It has only 1 word: John. It has 1 vowel: o, \n",
    "total length is 4.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "1afcd5cd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Enter a string: I am a student\n",
      "Enter a string: I like apples\n",
      "Enter a string: Done\n",
      "\n",
      "String 1: I am a student\n",
      "Number of words: 4\n",
      "Number of vowels: 5\n",
      "Total lenght: 14\n",
      "\n",
      "String 2: I like apples\n",
      "Number of words: 3\n",
      "Number of vowels: 5\n",
      "Total lenght: 13\n",
      "\n"
     ]
    }
   ],
   "source": [
    "create_list=[]\n",
    "input_count=0\n",
    "print()\n",
    "while True:\n",
    "    user_input=input('Enter a string: ')\n",
    "    if user_input!='Done':\n",
    "        create_list.append(user_input)\n",
    "        input_count+=1\n",
    "    else:\n",
    "        ans='no string was entered'\n",
    "        break\n",
    "\n",
    "word_count=0\n",
    "word_count_list=[]\n",
    "vowel_count=0\n",
    "vowel_list=['A','E','I','O','U','a','e', 'i','o','u' ]\n",
    "vowel_count_list=[]\n",
    "sentence_length_list=[]\n",
    "\n",
    "for sentence in create_list:\n",
    "    string=sentence.split()\n",
    "    word_count=0\n",
    "    for word in string:\n",
    "            word_count+=1\n",
    "    word_count_list.append(word_count)\n",
    "\n",
    "for sentence in create_list:\n",
    "    string=sentence.split()\n",
    "    vowel_count=0\n",
    "    for word in string:\n",
    "        for char in word:\n",
    "            for vowel in vowel_list:\n",
    "                if char==vowel:\n",
    "                    vowel_count+=1\n",
    "    vowel_count_list.append(vowel_count)\n",
    "    \n",
    "\n",
    "\n",
    "for sentence in create_list:\n",
    "    sentence_length_list.append(len(sentence))\n",
    "    \n",
    "print() \n",
    "if input_count==0:\n",
    "    print(ans)\n",
    "else:\n",
    "    for item in range(input_count):\n",
    "        temp=item+1\n",
    "        print('String '+str(temp)+':', end=' ')\n",
    "        print(create_list[item])\n",
    "        print('Number of words:', word_count_list[item])\n",
    "        print('Number of vowels:', vowel_count_list[item])\n",
    "        print('Total lenght:', sentence_length_list[item])\n",
    "        print()\n",
    "     "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a9072329",
   "metadata": {},
   "source": [
    "Question-2:\n",
    "\n",
    "Write a Python program that will take a string where multiple words are \n",
    "separated by spaces as an input from the user. Print the words from the \n",
    "input string in a list format. Then, make a dictionary from the words where \n",
    "the unique keys will be the 1st character of the words and the values will \n",
    "be all the words that start with the same character contained within a \n",
    "tuple.\n",
    "\n",
    "NOTE: For simplicity, you can treat uppercase and lowercase letter as one \n",
    "unique letter represented by lower case (i.e. may consider BOTH “P” and “p” \n",
    "to be “p”).\n",
    "\n",
    "\n",
    "Sample Input 1:\n",
    "\n",
    "\"This  is hard but I can do it!\"\n",
    "\n",
    "Sample Output 1:\n",
    "\n",
    "Words: ['This', 'is', 'hard', 'but', 'I', 'can', 'do', 'it!']\n",
    "\n",
    "{'t': ('this',), 'i': ('is', 'i', 'it!'), 'h': ('hard',), 'b': \n",
    "('but',), 'c': ('can',), 'd': ('do',)}\n",
    "\n",
    "Explanation 1:\n",
    "\n",
    "The word “This” starts with lowercase letter ‘t’. Therefore “t” became the \n",
    "key and the only word that starts with “t” is “This”. So, “this” became the \n",
    "only tuple value it contains. The elements “is”, “it” and “I” start with \n",
    "“i”. Therefore “i” became the key and the three words “is”, “it” and “I” \n",
    "became its value contained in a tuple and so on.\n",
    "\n",
    "\n",
    "Sample Input 2:\n",
    "\n",
    "\"I saw her selling sea shells in the sea shore\"\n",
    "\n",
    "Sample Output 2:\n",
    "\n",
    "Words: \n",
    "['I', 'saw', 'her', 'selling', 'sea', 'shells', 'in', 'the', 'sea', 'shore']\n",
    "{'i': ('i', 'in'), 's': \n",
    "('saw', 'selling', 'sea', 'shells', 'sea', 'shore'), 'h': ('her',), 't': \n",
    "('the',)}\n",
    "\n",
    "Explanation 2:\n",
    "\n",
    "“I” and “in” start with the same letter “i”. So they are the values for the \n",
    "key “i” enclosed in a tuple.  The elements “saw”, “selling” , “sea”, \n",
    "“shells”, “sea”, and “shore” all start with “s”. Therefore belong as a \n",
    "value to key “s”. Whereas, “her” and “the” were the only single elements \n",
    "that start with “h” and “t” so they were single tuple strings to keys “h” \n",
    "and “t”.\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "580fd45a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a string:\"This is hard but I can do it!\"\n",
      "\n",
      "Words: ['This', 'is', 'hard', 'but', 'I', 'can', 'do', 'it!']\n",
      "{'t': ('this',), 'h': ('hard',), 'i': ('is', 'i', 'it!'), 'd': ('do',), 'b': ('but',), 'c': ('can',)}\n"
     ]
    }
   ],
   "source": [
    "user_input=input('Enter a string:')\n",
    "word_list=[item for item in user_input[1:-1].split()]\n",
    "\n",
    "print()\n",
    "print('Words:', word_list)\n",
    "letter_list=[]\n",
    "\n",
    "word_list_lower=[]\n",
    "for word in word_list:\n",
    "    temp=word.lower()\n",
    "    word_list_lower.append(temp)\n",
    "\n",
    "for word in word_list_lower:\n",
    "    for char in word:\n",
    "        if char not in letter_list:\n",
    "            if 95<ord(char)<123:\n",
    "                letter_list.append(char)\n",
    "\n",
    "\n",
    "final_dict={}\n",
    "for char in letter_list:\n",
    "    for word in word_list_lower:\n",
    "        if word[0]==char:\n",
    "            if char not in final_dict:\n",
    "                final_dict[char]=[word]\n",
    "            else:\n",
    "                final_dict[char].append(word)\n",
    "\n",
    "create_dict={}\n",
    "for key, values in final_dict.items():\n",
    "    create_dict[key]=tuple(values)\n",
    "    \n",
    "print(create_dict)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "429c8192",
   "metadata": {},
   "source": [
    "Question-3:\n",
    "Write a function named weird_sort() that will take a list of numbers as an \n",
    "argument and then RETURN  a new list that will follow the format given \n",
    "below.\n",
    "\n",
    "Returned list format: [Largest, Smallest, Second largest, Second \n",
    "smallest,...so on...]\n",
    "\n",
    "Then print the returned list in the function call. You can assume the \n",
    "length of the given list will always be even, there will be no duplicate \n",
    "values, and the values will be in range(0,101).\n",
    "\n",
    "================================================\n",
    "Function Call 01:\n",
    "weird_sort([9, 3, 5, 7, 16, 20])\n",
    "\n",
    "Sample Output 01:\n",
    "[20, 3, 16, 5, 9, 7]\n",
    "\n",
    "Explanation 01:\n",
    "Largest value is 20 and the smallest value is 3. That's why in case of \n",
    "output, the values of the first two indices are 20 and 3. Similarly the \n",
    "second largest value and second smallest values are 16 and 5 respectively \n",
    "which are the values of  the following two indices.\n",
    "\n",
    "================================================\n",
    "Function Call 02:\n",
    "weird_sort([10,20,30,40,50,60])\n",
    "\n",
    "Sample Output 02:\n",
    "[60, 10, 50, 20, 40, 30]\n",
    "\n",
    "Explanation 02:\n",
    "Largest value is 60 and the smallest value is 10. That's why in case of \n",
    "output, the values of the first two indices are 60 and 10. Similarly the \n",
    "second largest value and second smallest values are 50 and 20 respectively \n",
    "which are the values of  the following two indices.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "207fcdd4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[60, 10, 50, 20, 40, 30]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def weird_sort(user_list):\n",
    "    \n",
    "    codeFlage=True\n",
    "    for num in user_list:\n",
    "        if -1<num<101:\n",
    "            codeFlag=True\n",
    "        else:\n",
    "            codeFlag=False\n",
    "            break\n",
    "            \n",
    "        \n",
    "    if codeFlag==True:\n",
    "        ascend=sorted(user_list)\n",
    "        descend=sorted(user_list, reverse=True)\n",
    "        \n",
    "        final_list=[]  \n",
    "        count=len(user_list)\n",
    "        mid_index=count//2\n",
    "        \n",
    "        for step in range(0, mid_index):\n",
    "            final_list.append(descend[step])\n",
    "            final_list.append(ascend[step])\n",
    "        \n",
    "        return final_list\n",
    "        \n",
    "    \n",
    "weird_sort([10,20,30,40,50,60])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c5fda056",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
